version: 0.1.50
interfaces:
  webserver:
    enabled: true
    welcome: true
    # host: joola #used for response-header [Server]
    bind: 0.0.0.0
    port: 8080
    secureport: 8081
    secure: true
    secureonly: false
    keyfile: ./config/certs/server.key
    certfile: ./config/certs/server.crt
    ca: ./config/certs/ca.crt
    websocket:
      enabled: true
    sessiondurtaion: 1200000
    timeout: 60000
    blacklist: null
    alloworigin: null
    headers:
      # X-Powered-By: joola
  repl:
    enabled: false
    port: 1337
store:
  stats:
    punt:
      port: 3015
  config:
    redis:
      # enabled: true
      dsn: redis://127.0.0.1
      ## if dsn not specific then these are required
      # host: 127.0.0.1
      # port: 6379
      # db: 0
      # auth: null
  runtime:
    redis:
      # enabled: true
      dsn: redis://127.0.0.1
  dispatch:
    # enabled: true
    redis:
      dsn: redis://127.0.0.1
    stomp:
      dsn: stomp://guest:guest@127.0.0.1:61613
      # if dsn not specific then these are required
      # host: 127.0.0.1
      # port: 61613
      # user: guest
      # pass: guest
  websocket:
    http:
      redis:
        #enabled: true
        dsn: redis://127.0.0.1
    https:
      redis:
        #enabled: true
        dsn: redis://127.0.0.1
  logger:
    console:
      level: debug
    # loggly:
      # level: trace
      # token: your-api-token
      # domain: loggly-subdomain
    file:
      level: trace
      path: /var/log/joola
  datastore:
    mongodb:
      enabled: true
      dsn: mongodb://localhost:27017/cache
      expireafterseconds: 0
    elasticsearch:
      enabled: false
      host: localhost:9200
beacon:
  wait: true
dispatch:
  enabled: true
  expires: 60
authentication:
  basicauth:
    enabled: true
    enable_with_http: true
  tokens:
    expireafter: 1200000
  ratelimits:
    guest: 60
    user: 9999999999
  force404: false
#sdk:
  # url: https://raw.githubusercontent.com/joola/joola.sdk/feature/%2376/bin/joola.js
query:
  fixgmt: false #should be true if server not running in GMT+0
workspaces:
  _test:
    key: _test
    name: joola Framework Tests
    description: Workspace for internal joola tests
    roles:
      root:
        key: "root"
        permissions:
          - "beacon:insert"
          - "query:fetch"
          - "query:stop"
          - "collections:list"
          - "collections:get"
        filter: []
      user:
        key: "users"
        permissions:
          - "query:fetch"
    users:
      root:
        username: "root"
        password: "password"
        roles:
          - "root"
        displayName: "Administrator"
        APIToken: "apitoken-test"
        ratelimit: 9999999999
  _stats:
    key: _stats
    name: Internal Stats
    description: Stores internal statistics of joola
    roles:
      beacon:
        key: "beacon"
        permissions:
          - "beacon_insert"
          - "collections:get"
        filter: []
      reader:
        key: "reader"
        permissions:
          - "query:fetch"
        filter: []        
    users:
      root:
        username: "stats-beacon"
        password: "password"
        roles:
          - "beacon"
        displayName: "Stats Beacon"
        APIToken: "apitoken-stats"
        ratelimit: 9999999999
      reader:
        username: "stats-reader"
        password: "password"
        roles:
          - "reader"
        displayName: "Stats Reader"
        ratelimit: 9999999999        
    collections:
      reads:
        key: "reads"
        name: "reads"
        strongTyped: true
        timestamp:
          datatype: "date"
          type: "dimension"
          name: "timestamp"
          key: "timestamp"
        node:
          datatype: "string"
          type: "dimension"
          name: "node"
          key: "node"
        event:
          datatype: "string"
          type: "dimension"
          name: "event"
          key: "event"
        workspace:
          datatype: "string"
          type: "dimension"
          name: "workspace"
          key: "workspace"          
        collection:
          datatype: "string"
          type: "dimension"
          name: "collection"
          key: "collection"
        username:
          datatype: "string"
          type: "dimension"
          name: "username"
          key: "username"
        readCount:
          datatype: "number"
          type: "metric"
          name: "readCount"
          key: "readCount"
        duration:
          datatype: "number"
          type: "metric"
          name: "duration"
          key: "duration"
      writes:
        key: "writes"
        name: "writes"
        strongTyped: true
        timestamp:
          datatype: "date"
          type: "dimension"
          name: "timestamp"
          key: "timestamp"
        node:
          datatype: "string"
          type: "dimension"
          name: "node"
          key: "node"
        event:
          datatype: "string"
          type: "dimension"
          name: "event"
          key: "event"
        workspace:
          datatype: "string"
          type: "dimension"
          name: "workspace"
          key: "workspace"          
        collection:
          datatype: "string"
          type: "dimension"
          name: "collection"
          key: "collection"
        username:
          datatype: "string"
          type: "dimension"
          name: "username"
          key: "username"
        writeCount:
          datatype: "number"
          type: "metric"
          name: "writeCount"
          key: "writeCount"
        duration_per_doc:
          datatype: "number"
          type: "metric"
          name: "duration_per_doc"
          key: "duration_per_doc"
      simple:
        key: "simple"
        name: "simple"
        strongTyped: true
        timestamp:
          datatype: "date"
          type: "dimension"
          name: "timestamp"
          key: "timestamp"
        node:
          datatype: "string"
          type: "dimension"
          name: "node"
          key: "node"
        event:
          datatype: "string"
          type: "dimension"
          name: "event"
          key: "event"
        workspace:
          datatype: "string"
          type: "dimension"
          name: "workspace"
          key: "workspace"          
        collection:
          datatype: "string"
          type: "dimension"
          name: "collection"
          key: "collection"
        username:
          datatype: "string"
          type: "dimension"
          name: "username"
          key: "username"
        simpleCount:
          datatype: "number"
          type: "metric"
          name: "simpleCount"
          key: "simpleCount"                            
      node-count:
        key: "node-count"
        name: "node-count"
        strongTyped: true
        expireafterseconds: 3600
        timestamp:
          datatype: "date"
          type: "dimension"
          name: "timestamp"
          key: "timestamp"
        node:
          datatype: "string"
          type: "dimension"
          name: "node"
          key: "node"
        event:
          datatype: "string"
          type: "dimension"
          name: "event"
          key: "event"
        nodes:
          datatype: "number"
          type: "metric"
          name: "nodes"
          key: "nodes"
      token-count:
        key: "token-count"
        name: "token-count"
        strongTyped: true
        expireafterseconds: 3600
        timestamp:
          datatype: "date"
          type: "dimension"
          name: "timestamp"
          key: "timestamp"
        node:
          datatype: "string"
          type: "dimension"
          name: "node"
          key: "node"
        event:
          datatype: "string"
          type: "dimension"
          name: "event"
          key: "event"
        tokens:
          datatype: "number"
          type: "metric"
          name: "tokens"
          key: "tokens"
      usage:
        key: "usage"
        name: "usage"
        strongTyped: true
        expireafterseconds: 3600
        timestamp:
          datatype: "date"
          type: "dimension"
          name: "timestamp"
          key: "timestamp"
        node:
          datatype: "string"
          type: "dimension"
          name: "node"
          key: "node"
        event:
          datatype: "string"
          type: "dimension"
          name: "event"
          key: "event"
        cpu:
          datatype: "number"
          type: "metric"
          name: "cpu"
          key: "cpu"
        mem:
          datatype: "number"
          type: "metric"
          name: "mem"
          key: "mem"
      events-request:
        key: "events-request"
        name: "events-request"
        strongTyped: true
        expireafterseconds: 3600
        timestamp:
          datatype: "date"
          type: "dimension"
          name: "timestamp"
          key: "timestamp"
        node:
          datatype: "string"
          type: "dimension"
          name: "node"
          key: "node"
        event:
          datatype: "string"
          type: "dimension"
          name: "event"
          key: "event"
        events:
          datatype: "number"
          type: "metric"
          name: "events"
          key: "events"
      events-fulfilled:
        key: "events-fulfilled"
        name: "events-fulfilled"
        strongTyped: true
        expireafterseconds: 3600
        timestamp:
          datatype: "date"
          type: "dimension"
          name: "timestamp"
          key: "timestamp"
        node:
          datatype: "string"
          type: "dimension"
          name: "node"
          key: "node"
        event:
          datatype: "string"
          type: "dimension"
          name: "event"
          key: "event"
        fulfilled:
          datatype: "number"
          type: "metric"
          name: "fulfilled"
          key: "fulfilled"
        fulfilledtime:
          datatype: "number"
          type: "metric"
          name: "fulfilledtime"
          key: "fulfilledtime"
  demo:
    key: demo
    name: Demo Workspace
    description: A starter/playground workpsace 
    roles:
      root:
        key: "root"
        permissions:
          - "superuser"
          - "workspaces:list"
          - "workspaces:get"
          - "workspaces:add"
          - "workspaces:patch"
          - "workspaces:delete"
          - "config:get"
          - "config:set"
          - "permissions:list"
          - "permissions:get"
          - "collections:list"
          - "collections:get"
          - "collections:add"
          - "collections:patch"
          - "collections:delete"
          - "collections:metadata"
          - "collections:mindate"
          - "collections:maxdate"
          - "collections:stats"
          - "dimensions:list"
          - "dimensions:add"
          - "dimensions:get"
          - "dimensions:patch"
          - "dimensions:delete"
          - "metrics:list"
          - "metrics:add"
          - "metrics:get"
          - "metrics:patch"
          - "metrics:delete"
          - canvases:list
          - canvases:add
          - canvases:get
          - canvases:patch
          - canvases:delete
          - "roles:list"
          - "roles:get"
          - "roles:add"
          - "roles:patch"
          - "roles:delete"
          - "users:list"
          - "users:get"
          - "users:add"
          - "users:patch"
          - "users:delete"
          - "users:generateToken"
          - "users:validateToken"
          - "users:expireToken"
          - "users:permissions"
          - "beacon:insert"
          - "query:fetch"
          - "query:stop"
          - "system:nodeuid"
          - "system:nodedetails"
          - "system:terminate"
          - "system:purgeCache"
          - "system:roundtrip"
          - "system:whoami"
          - "system:version"
          - "system:usage"
          - "usage:last_write"
          - "usage:last_read"
          - "usage:last_use"
          - "misc:see_private"
        filter: []
      user:
        key: "user"
        permissions:
          - "guest"
        filter: []
      beacon:
        key: "user"
        permissions:
          - "beacon:insert"
          - "query:fetch"
          - "query:stop"
          - "system:version"
        filter: []
      reader:
        key: "user"
        permissions:
          - "beacon:insert"
          - "query:fetch"
          - "query:stop"
          - "system:version"
        filter: []
    users:
      root:
        username: "root"
        password: "password"
        roles:
          - "root"
        displayName: "Administrator"
        APIToken: "apitoken-demo"
        ratelimit: 9999999999
        filter: []
      beacon:
        username: "beacon"
        password: "password"
        roles:
          - "beacon"
        displayName: "Beacon"
        APIToken: "apitoken-beacon"
      reader:
        username: "reader"
        password: "password"
        roles:
          - "reader"
        displayName: "Reader"
        APIToken: "apitoken-reader"
    collections:
