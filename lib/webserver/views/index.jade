include layout_head

main.bs-docs-masthead(id="content", role="main")
  .container
    .hero-wrapper  
      svg#Layer_1(version='1.1', xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', x='0px', y='0px', viewbox='0 0 612 173.7', enable-background='new 0 0 612 173.7', xml:space='preserve')
        g
          path(fill='#FFFFFF', d='M16.6,59.8h42.1v64.5c0,6.9-1.6,12.1-4.8,15.6c-3.2,3.5-7,5.2-11.5,5.2c-9.1,0-17.8-4.4-26.1-13l-11.9,27\
            c11.5,9.8,24.7,14.7,39.4,14.7c13.7,0,24.9-4.2,33.7-12.6c8.7-8.4,13.1-21.1,13.1-38V30.3h-74V59.8z')
          | &#x9;
          path(fill='#FFFFFF', d='M325.9,41h1.5L351,3.8c0,0-37.2,24.1-117.2,24.1c-79.3,0-119.2-24.1-119.2-24.1L138.2,41h0.9\
            c-20.9,12.5-34.9,35.2-34.9,61.2c0,16.6,5.7,31.9,15.3,44c-5.7,8.3-8.8,17.3-8.8,26.8c0,0.2,0,0.4,0,0.6h243.5c0-0.2,0-0.4,0-0.6\
            c0-9.5-3.2-18.6-8.8-26.8c9.6-12.1,15.3-27.4,15.3-44C360.7,76.3,346.7,53.5,325.9,41z M179.2,34.8c19.9,0.9,38.2,10.4,50.5,26.2\
            l2.8,3.6l2.8-3.6c12.3-15.8,30.6-25.3,50.5-26.2v22.7c-22.1,1.6-40.1,19.2-41.9,41.5h-22.9c-1.7-22.3-19.8-39.9-41.9-41.5V34.8z\
            M175.6,143.8L175.6,143.8c-22.9-0.1-41.5-18.7-41.5-41.6c0-22.9,18.6-41.5,41.5-41.6c0.1,0,0.2,0,0.2,0c22,0,40.1,17.1,41.7,38.6\
            c0.1,1,0.1,2,0.1,3c0,1,0,2-0.1,3c-1.5,21.6-19.6,38.6-41.7,38.6C175.8,143.8,175.7,143.8,175.6,143.8z M179.2,170.2v-22.7\
            c16.3-1.2,30.5-11.1,37.4-25.2c2.3,8.5,6.2,16.5,11.4,23.8C215.7,160.7,198.2,169.3,179.2,170.2z M285.8,170.2\
            c-19-0.9-36.5-9.6-48.8-24.1c5.2-7.3,9.1-15.3,11.4-23.8c7,14.1,21.1,24,37.4,25.2V170.2z M289.4,143.8L289.4,143.8\
            c-0.1,0-0.2,0-0.2,0c-22,0-40.1-17.1-41.7-38.6c-0.1-1-0.1-2-0.1-3c0-1,0-2,0.1-3c1.5-21.6,19.6-38.6,41.7-38.6c0.1,0,0.2,0,0.2,0\
            c22.9,0.1,41.5,18.7,41.5,41.6C330.9,125.1,312.3,143.7,289.4,143.8z')
          | &#x9;
          path(fill='#FFFFFF', d='M175.6,87.6c-8.2,0-14.9,6.7-14.9,14.9c0,8.2,6.7,14.9,14.9,14.9c8.2,0,14.9-6.7,14.9-14.9\
            C190.6,94.3,183.9,87.6,175.6,87.6z')
          | &#x9;
          path(fill='#FFFFFF', d='M289.4,87.6c-8.2,0-14.9,6.7-14.9,14.9c0,8.2,6.7,14.9,14.9,14.9c8.2,0,14.9-6.7,14.9-14.9\
            C304.3,94.3,297.6,87.6,289.4,87.6z')
          | &#x9;
          path(fill='#FFFFFF', d='M546.2,30.9h-30.7L466.1,145v-0.2h-60.6V30.9h-31.7v142.2H454h12.1h21.6l13.2-28.5h59.6l13.2,28.5h33.8\
            L546.2,30.9z M513,116.7l17.9-43.5l17.7,43.5H513z')


    //p.lead Liberating data analytics.
    p.lead Liberating data analytics
    p.lead
      a.btn.btn-outline-inverse.btn-lg(href="http://github.com/joola/joola") View the GitHub project
    p.version Currently v#{version}

.container
  .row
    .col-md-12
      .bs-docs-section(id="demo")
        h1.page-header Demo 
          small (site usage over last hour) 
        p.lead A Demo of joola basic functionality and a great way to check system health.

    .col-md-12
      .row
        .col-md-4
          #metricbox-1.metric.active
        .col-md-4
          #metricbox-3.metric
        .col-md-4
          #metricbox-2.metric
      .row
        .col-md-12
          #chart-1.chart
  p
  .row
    .col-md-12
      p The demo responds to actions and events on this page. Everytime you move your mouse, visit the page or click on it, an event is pushed into joola and then visualized.
    .col-md-6
      p When you move your mouse the following document is compiled and pushed to joola:
      pre.prettyprint(lang="javascript").
        var doc = {
          timestamp: null,
          browser: 'Chrome',
          os: 'Linux',
          userid: 'demo user',
          mousemoves: 1
        };

        joola.beacon.insert('demo-mousemoves', doc);
      p.center-block.text-center
        a.btn.btn-lg.btn-outline(href="http://github.com/joola/joola/pushing-data", role="button") Learn more about pushing data
    .col-md-6
      p Drawing visualizations is as easy as describing what you would like to see.
      pre.prettyprint(lang="javascript").
        var query = {
          timeframe: 'last_hour',
          interval: 'minute',
          dimensions: ['timestamp'],
          metrics: ['mousemoves'],
          collection: 'demo-mousemoves'
        };

        $('#container').Timeline({query: query});
      p.center-block.text-center
        a.btn.btn-lg.btn-outline(href="http://github.com/joola/joola/wiki/analytics-and-visualization", role="button") Learn more about visualization
  .row
    .col-md-12
      .bs-docs-section(id="gettingstarted")
        h1.page-header Getting Started
        p.lead An overview of joola, how to setup, configure and use.
        p.
          joola was designed by developers for developers. We did the heavy-lifting with all that is data and framework related,
          this is what makes joola so easy and fun to play with.<br/>
          The project is rich with <a href="http://github.com/joola/joola">documentation</a>, <a href="#examples">examples</a> and <a href="http:github.com/joola/joola/wiki/workshops">workshops</a>.
        p.
          Below is a quick guide for getting started with your first visualization and some basic concepts used throughout.
        .bs-callout.bs-callout-warning
          h4 Assumptions
          p.
            Please note that for this getting started guide we'll be assuming <code>localhost</code> as your server and <code>apitoken-root</code> as your APIToken (default).
            <br/>Also, when referring to dependencies such as <a href="http://mongodb.org">MongoDB</a>, <a href="http://redis.io">Redis</a>, etc... we assume that these are installed on your <code>localhost</code>.
          p.
            For a complete setup and configuration guide, please refer to our <a href="http://github.com/joola/joola/wiki">wiki</a>.
        h2 Installation
        p.
          joola is written in JavaScript and runs using <a href="http://nodejs.org">Node.JS</a>, an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.
          In addition we use additional components as part of the stack, all required to be installed prior to installing joola. 
          <br/><strong>Remember:</strong> we'll assume <code>localhost</code> is used throughout this page. If you wish to use another machine, please refer to the configuration section on the <a href="http://github.com/joola/joola/io/wiki">wiki</a>.
        .row
          .col-md-12
            h3 Before installing joola
          .col-md-3
            .logo3rd
              a(href="http://nodejs.org")
                img(src="img/nodejs-logo.png")
            p.download-intro.
              joola is written in JavaScript and runs using <a href="http://nodejs.org">Node.JS</a>, an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.
            p.center-block.text-center
              a.btn.btn-lg.btn-outline(href="http://nodejs.org/download/", role="button") Install Node.JS
          .col-md-3
            .logo3rd
              a(href="http://redis.io")
                img(src="img/redis-logo.png")
            p.download-intro.
              Redis is an open source, BSD licensed, advanced key-value store. It is often referred to as a data structure server since keys can contain strings, hashes, lists, sets and sorted sets.
              joola uses Redis to store its configuration and metadata.
            p.center-block.text-center
              a.btn.btn-lg.btn-outline(href="http://redis.io/download", role="button") Install Redis
          .col-md-3
            .logo3rd
              a(href="http://mongodb.org")
                img(src="img/mongodb-logo.png")
            p.download-intro.
              Documents pushed into joola are stored in a cache layer which is currently based on MongoDB, an open-source document database, and the leading NoSQL database. In the future, we'll support additional providers such as Cassandra, RethinkDB and more.
            p.center-block.text-center
              a.btn.btn-lg.btn-outline(href="http://www.mongodb.org/downloads", role="button") Install MongoDB          
          .col-md-3
            .logo3rd
              a(href="http://www.rabbitmq.com")
                img(src="img/rabbitmq-logo.png")
            p.download-intro.
              In order to provide a scalabale framework that can handle very high loads of data consumption, joola uses STOMP to communicate with leading Message Queues. 
              We have chosen RabbitMQ as the default MQ provider due to its simplicity and power.
            p.center-block.text-center
              a.btn.btn-lg.btn-outline(href="http://www.rabbitmq.com/download.html", role="button") Install RabbitMQ        
        .row
          .col-md-12
            h3 Installing joola
            p joola can be installed from either the NPM registry or directly from the GitHub repository.
        .row
          .col-md-6
            h4 Installing from NPM registry
            pre.prettyprint(lang="bash").
              $ npm install -g joola #for global install
              # OR 
              $ npm install joola              
          .col-md-6
            h4 Installing from GitHub repository
            pre.prettyprint(lang="bash").
              $ git clone http://github.com/joola/joola .
              # OR
              $ npm install http://github.com/joola/joola/tarball/master
        .row
          .col-md-12
            h4 First time run
            pre.prettyprint(lang="bash").
              # for global installations
              $ joola
              # for local installations
              $ node node_modules/joola/joola.js

              08:50:44.179Z WARN joola: Found an empty configuration store, building initial...
              08:50:44.360Z INFO joola: joola version 0.4.0 started [CH3mIJWhy].
        h2 Connecting to joola
        p.
          There are several ways to communicate with your joola node and they all eventually (bar the REPL) use joola's API endpoints to pass instructions and data.<br/>
          Our main method of communication is using the SDK, it exposes a standard method to consume joola's API endpoints.
        .row
          .col-md-6
            h3 Using the SDK
            p.
              The SDK is a single Javascript file containing all that is needed to operate ALL aspects of joola. The SDK is not only used to control joola, but also responsible for visualizing data on screen.
            pre.prettyprint(lang="javascript").
              var joola = require('joola.sdk');
              joola.init({
                  host:'http://localhost:8080', APIToken: 'apitoken-root'
                }, function(err){
                if (err) throw err;
                console.log('joola ready, version', joola.VERSION);
                //joola ready, version 0.4.0
              });
          .col-md-6
            h3 Using the CLI (Command Line Interface)
            p.
              The CLI is based on the SDK and offers an easy manner for communication with joola without needing to write lines of code.
              In addition, the CLI offers a shorthand call of built-in joola functions, it will automatically add callback and print out to your calls.
            pre.prettyprint(lang="bash").
              $ joola.cli -h host -u username -p password

              joola.cli (0.0.1) starting...
              Connecting to joola @ http://localhost:8080...

              joola root@localhost:8080> joola.VERSION
              '0.4.0'
              joola root@localhost:8080>
        .row
          p.center-block.text-center
            a.btn.btn-lg.btn-outline(href="http://github.com/joola/joola/sdk", role="button") Learn more about the SDK
        h2 Configuration
        p.
          joola has a wide range of configurable settings. Setting these options can be done manually with joola launch or during runtime.
          Runtime configuration effect all nodes on the grid immediately and allows in-place scalability and security changes to be put in place.
        .row
          .col-md-6
            h3 Baseconfig.json
            p.
              joola's initial configuration is loaded from <code>config/baseconfig.json</code>.
              By changing these values and calling <code>$ joola --baseconfig</code>, you can apply an initial configuration to your joola node.
            pre.prettyprint(lang="bash").
              configuration/
                ├── interfaces/
                ├── authentcation/
                ├── store/
                │   ├── configuration/
                │   ├── cache/
                │   └── logger/
                ├── workspaces/
                │   ├── users/
                │   ├── roles/
                │   ├── collections/
                │   └── canvases/
                └── alerts
          .col-md-6
            h3 Runtime configuration
            p.
              Runtime configuration allows for nodes to be updated without a service restart. By connecting to a single node, you are connected to the grid, so
              issuing a config change will effect all at once.
            pre.prettyprint(lang="bash").
              $ joola.cli -h host -u username -p password

              joola.cli (0.0.1) starting...
              Connecting to joola @ http://localhost:8080...
              joola> joola.config.get('store:logger:mongo')
              { host: 'localhost',
                password: null,
                level: 'trace',
                unique: false,
                port: 27017,
                user: null,
                db: 'logger',
                options: { capped: true, size: 10240000 } }
        .row
          p.center-block.text-center
            a.btn.btn-lg.btn-outline(href="http://github.com/joola/joola/wiki/configuration", role="button") Learn more about configuration
        h2 Authentication
        p.
          joola is a secure, multi-tenant framework. This means that any action carried out requires a security context and users must authenticate before they
          can communicate with the system. There are several authentication methods available.
        .bs-callout.bs-callout-warning
          h4 Security Note
          p.
            Please make sure you change the default collections, passwords, roles, users, etc... before making your node available publicly.
          p To change the default root password:
          pre.prettyprint(lang="javascript").
            joola.users.update('root', {username: 'root', password: 'newpassword'}));
          p Read more about security and authentication in our <a href="http://github.com/joola/joola/wiki">wiki</a>.
        .row
          .col-md-12
            h3 API Tokens
            p.
              An API token is a simple string that is assosiciated with a user account. Accessing joola with this API token will create a security context for the user and allow them to access the system according to their permissions and filters.
            strong HTML
            pre.prettyprint(lang="html").
              &lt;script src="http://localhost:8080/joola.min.js?APIToken=apitoken-root"></script>
            strong Node.JS
            pre.prettyprint(lang="javascript").
              var joola = require('joola.sdk');
              joola.init({
                host: 'http://localhost:8080',
                APIToken: 'apitoken-root'
              }, function(err, result) {});
        .row
          .col-md-12
            h3 Server-side authentication
            p.
              API tokens are useful, but not very every scenario. On some, the admin wish to avoid users holding long-term tokens and instead wishes to issue a short-term, "single-use" token for accessing joola.
            pre.prettyprint(lang="javascript").
              var joola = require('joola.sdk');
              joola.authenticate('workspace', 'username', 'password', function(err, token) {
                //we're now logged in as root
                console.log('we now have a token for the user', token);
              });
        .row
          .col-md-12
            h3 Command Line Interface (CLI)
            p.
              The CLI uses the SDK for communicating with a joola node, so you can apply the same authentication methods as used throughout the SDK.
              <br/>However, it does support a few switches that make it easier to use.
            pre.prettyprint(lang="bash").
              $ joola.cli --help
              # Shows a list of all possible commands and options
              $ joola.cli -h "http://localhost:8080" -u root -p password
              # Logged in as root on localhost:8080
        .row
          .col-md-12
            h3 Single Sign On (SSO)
            p.
              Often admins already have their own userbase and would like to display data to signed users. In such cases, joola's internal user management is redundant and we should avoid duplicating user details.
              <br/>Therefore, when we want to apply SSO we impersonate the user by creating a token for it. The example below shows generating a token for a user, which will be allowed to see only items where the <code>browser='Chrome'</code>.
            pre.prettyprint(lang="javascript").
              var user = {
                username: 'demo user',
                roles: ['user'],
                filter: [
                  ['browser', 'eq', 'Chrome']
                ]
              };
              joola.users.generateToken('workspace', user, function(err, token) {
                console.log('Here is our new token', token);
              });
        .row
          p.center-block.text-center
            a.btn.btn-lg.btn-outline(href="http://github.com/joola/joola/wiki/security-and-authentication", role="button") Learn more about authentication
        .row
        h2 Pushing data
        p.
          After the framework is setup (if you see the demo above, then it's fine), we can move on to push data into joola.
          Data to be pushed is described as an array of JSON documents, where each document describes all details needed for later retrieval.
          <a href="http://github.com/joola/joola/wiki/collections">Collections</a> are used to batch data into logical containers, they store valualble metadata needed when <a href="https://github.com/joola/joola/wiki/analytics-and-visualization">querying</a> information.
          Once data is pushed it's immediately available for query and visualization and pushing it cannot get easier.
        h3 A quick demo
        .row
          .col-md-6
            p.
             Describe your data as a JSON document and choose a <a href="http://github.com/joola/joola/wiki/collections">collection</a> to push to.
             <br/>When you're done click on the 'Push' button to see results on the right pane.
            form(role="form")
              .form-group
                label Collection name
                div.input-group
                  input.form-control(type="text" ,id="collectionName", placeholder="Enter a collection name")
                  span.input-group-btn
                    button.btn.btn-default(type="button", id="pushEvent") Push!
            #editor.editor.
              {
                "timestamp": null,
                "article": "Sample Analytics",
                "browser": "Chrome",
                "device": "Desktop",
                "engine": "Webkit",
                "os": "Linux",
                "userid": "demo@joo.la",
                "ip": "127.0.0.1",
                "referrer": "http://joo.la",
                "visits": 1,
                "loadtime": 123
              }
          .col-md-6
            p(style="padding-bottom:15px").
              Beacon transforms documents during the 'push' process. It adds time buckets and other helpers to allow faster querying and visualization.
              Data is then crunched to several time resolutions, each allowing cached data to be purged after a certain period of time, thus reducing the overall disk usage and query time.
              Following the push of data, you will see a transformed document below.
            #editor2.editor.
              Use the editor on the left to describe the data you want to push.
              Results will show up here.
        .row(style="margin-top:15px;")
          p.center-block.text-center
            a.btn.btn-lg.btn-outline(href="http://github.com/joola/joola/wiki/pushing-data", role="button") Learn more about pushing data
        h2 Visualization
        p.
          Now we get to the real deal, visualizing your data. It's simple and fun! We create a simple JSON to describe the <a href="https://github.com/joola/joola/wiki/analytics-and-visualization">query</a> and choose a visualization type to plot it.
          <br/>There are several different visualization types to play with and the open nature of the framework makes it easy to write your own and add more visualizations.
        h3 A quick demo
        .row
          .col-md-6
            p.
             Describe the data you would like to visualize. Specify the timeframe, interval, dimensions and metrics participating.
             You can also ask for realtime updates of the visualization.
             <br/>When you're done describing, don't forget to specify which <a href="http://github.com/joola/joola/wiki/collections">collection</a> to <a href="https://github.com/joola/joola/wiki/SDK-API-Documentation#joolaquery">query</a> and choose a visualization type.
             Results will be shown on the right pane.
            form(role="form")
              .form-group
                label Collection name
                div.input-group
                  input.form-control(type="text" ,id="viz-collectionName", placeholder="Enter a collection name")
                  span.input-group-btn
                    button.btn.btn-default(type="button", id="visualize") Visualize!
                    button.btn.btn-default.dropdown-toggle(type="button", data-toggle="dropdown", id="visualize")
                      span.caret
                    ul.dropdown-menu
                      li
                        label.checkbox
                          input.viz-check(type="checkbox", data-attr="timeline", checked="true")
                          | Timeline
                      li
                        label.checkbox
                          input.viz-check(type="checkbox", data-attr="metricbox")
                          | Metric Box
                      li
                        label.checkbox
                          input.viz-check(type="checkbox", data-attr="table")
                          | Table
                      li
                        label.checkbox
                          input.viz-check(type="checkbox", data-attr="pie")
                          | Pie            
            #editor3.editor.
              {
                "timeframe": "last_hour",
                "interval": "minute",
                "dimensions": ["timestamp"],
                "metrics": ["visits"]
              }
          .col-md-6
            #vizcontainer.active
        .row(style="margin-top:15px;")
          p.center-block.text-center
            a.btn.btn-lg.btn-outline(href="http://github.com/joola/joola/wiki/analytics-and-visualization", role="button") Learn more about visualizations

include layout_footer